#!/bin/bash

# Usage: bin/local-sync [--rebuild] path/to/repo

set -e

REPO_SYNC_ROOT=$(pwd)
DOCKER_IMAGE="repo-sync-local"
DOCKER_DIR="${REPO_SYNC_ROOT}/local-sync"
DOCKER_REBUILD=false
DOCKER_SHELL=false
REPO_SYNC_SCHEMA_PATH="${REPO_SYNC_ROOT}/templates/repo-sync-schema.json"

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help|-h)
      echo "Hanakai repo sync local testing tool"
      echo ""
      echo "USAGE:"
      echo "    $(basename "$0") [OPTIONS] <REPOSITORY_PATH>"
      echo ""
      echo "ARGUMENTS:"
      echo "    <REPOSITORY_PATH>    Path to the target repository directory"
      echo ""
      echo "OPTIONS:"
      echo "    --schema <PATH>      Path to repo-sync schema JSON file"
      echo "                         (default: templates/repo-sync-schema.json)"
      echo "    --rebuild            Force rebuild of Docker image"
      echo "    --shell              Enter interactive shell instead of running sync"
      echo "    -h, --help           Show this help message"
      echo ""
      echo "DESCRIPTION:"
      echo "    Test file synchronization against local repository checkouts. This script"
      echo "    runs the same sync logic as the GitHub Action but operates on local repos"
      echo "    to allow for easy development and testing of templates."
      echo ""
      echo "    The script uses Docker to provide a faithful reproduction of the GitHub"
      echo "    Action environment and invokes the same internal logic."
      echo ""
      echo "EXAMPLES:"
      echo "    # Basic sync to a local repository"
      echo "    $(basename "$0") /path/to/target/repository"
      echo ""
      echo "    # Rebuild Docker image and sync"
      echo "    $(basename "$0") --rebuild /path/to/target/repository"
      echo ""
      echo "    # Enter interactive shell for debugging"
      echo "    $(basename "$0") --shell /path/to/target/repository"
      echo ""
      echo "    # Use custom schema file"
      echo "    $(basename "$0") --schema /path/to/schema.json /path/to/target/repository"
      exit 0
      ;;
    --schema)
      shift
      REPO_SYNC_SCHEMA_PATH="$1"
      shift
      ;;
    --rebuild)
      DOCKER_REBUILD=true
      shift
      ;;
    --shell)
      DOCKER_SHELL=true
      shift
      ;;
    *)
      # If not a flag, assume it's the target repo path
      if [ -z "${TARGET_REPO_DIR+x}" ]; then
        TARGET_REPO_DIR=$(realpath "$1")
      else
        echo "Error: Unexpected argument: $1"
        echo "Usage: $0 [--rebuild] --schema path/to/schema.json path/to/repo"
        exit 1
      fi
      shift
      ;;
  esac
done

if [ -z "${REPO_SYNC_SCHEMA_PATH+x}" ]; then
  echo "Error: No schema specified"
  echo "Usage: $0 [--rebuild] --schema path/to/schema.json path/to/repo"
  exit 1
fi

if [ ! -f "$REPO_SYNC_SCHEMA_PATH" ]; then
  echo "Error: repo-sync schema file not found: $REPO_SYNC_SCHEMA_PATH"
  exit 1
fi

if [ -z "${TARGET_REPO_DIR+x}" ]; then
  echo "Error: No target repository specified"
  echo "Usage: $0 [--rebuild] --schema path/to/schema.json path/to/repo"
  exit 1
fi

if [ ! -d "$TARGET_REPO_DIR" ]; then
  echo "Error: Target repository directory does not exist: $TARGET_REPO_DIR"
  exit 1
fi

if [ "$DOCKER_REBUILD" = true ] || ! docker image inspect "${DOCKER_IMAGE}" >/dev/null 2>&1; then
  echo "Building Docker image..."
  docker build -q -t "${DOCKER_IMAGE}" "${DOCKER_DIR}" >/dev/null
fi

REPO_NAME=$(basename "$TARGET_REPO_DIR")

DOCKER_ARGS=(
  "--rm"
  "-v" "${REPO_SYNC_ROOT}:/workspace"
  "-e" "REPO_SYNC_SCHEMA_PATH=/workspace/${REPO_SYNC_SCHEMA_PATH}"
  "-v" "${TARGET_REPO_DIR}:/repos/${REPO_NAME}"
)

if [[ "$DOCKER_SHELL" == "true" ]]; then
  docker run "${DOCKER_ARGS[@]}" -it --entrypoint /bin/bash "${DOCKER_IMAGE}"
else
  docker run "${DOCKER_ARGS[@]}" "${DOCKER_IMAGE}" "/repos/${REPO_NAME}"
fi

if ! (cd "$TARGET_REPO_DIR" && git diff --quiet && git diff --staged --quiet); then
  echo "Changes:"
  (cd "$TARGET_REPO_DIR" && git status --short)
else
  echo "No files changed."
fi
